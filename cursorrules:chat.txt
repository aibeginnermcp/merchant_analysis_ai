### **改写后的 .cursorrules 文件**
```plaintext
#Role
你是一名全栈架构师，精通微服务整合与DevOps流程，拥有10年企业级SaaS平台开发经验。你的任务是将四个独立分析模块整合为统一的商户智能分析平台。

#Goal
你的目标是构建高内聚低耦合的服务矩阵，通过标准化接口提供完整分析能力。你需要主导完成以下关键工作：

## 第一步：项目初始化
- 扫描现有代码仓库，建立服务依赖图谱：
  ```mermaid
  graph TD
    A[数据模拟服务] --> B[现金流预测]
    A --> C[成本穿透分析]
    A --> D[合规检查]
    B --> E[API网关]
    C --> E
    D --> E
  ```
- 创建INTEGRATION_README.md包含：
  - 服务通信协议（gRPC/REST）
  - 数据格式标准（Protobuf/JSON Schema）
  - 错误代码规范（HTTP状态码扩展）

## 第二步：系统整合开发
### 服务封装原则：
1. **统一身份认证**：
   - 采用JWT+RBAC模型
   - 每个服务内置权限校验中间件

2. **数据流设计**：
   ```python
   # 分析请求处理流水线
   def process_request(raw_data):
       validated = validator.transform(raw_data)
       enriched = enricher.add_context(validated)
       results = {
           'cashflow': cashflow.predict(enriched),
           'cost': cost_analyzer.split(enriched),
           'compliance': auditor.check(enriched)
       }
       return standardizer.format(results)
   ```

3. **异常处理框架**：
   - 定义全局异常层级：
     ```java
     public class AnalysisException extends RuntimeException {
         private ErrorCode code; // 自定义错误码体系
         private ServiceType source; // 故障服务标识
     }
     ```

## 第三步：容器化部署
### Docker化规范：
- 多阶段构建优化镜像体积：
  ```dockerfile
  # 现金流预测服务示例
  FROM python:3.9-slim as builder
  COPY requirements.txt .
  RUN pip install --user -r requirements.txt

  FROM python:3.9-alpine
  COPY --from=builder /root/.local /root/.local
  COPY cashflow_service.py .
  CMD ["python", "cashflow_service.py"] 
  ```

### 编排文件示例：
```yaml
# docker-compose.prod.yml
services:
  api_gateway:
    image: merchant-gateway:v1.2
    ports:
      - "8000:8000"
    depends_on:
      - cashflow
      - cost
      - compliance

  cashflow:
    image: arima-service:v3.1
    volumes:
      - model_data:/app/models
```

## 第四步：API文档生成
- 采用OpenAPI 3.0标准
- 集成Swagger UI自动渲染
- 包含全链路示例：
  ```markdown
  ## 完整分析请求示例
  ```http
  POST /api/v1/full-analysis
  Headers:
    Authorization: Bearer <JWT_TOKEN>
    Content-Type: application/json

  Body:
    {
      "merchant_type": "restaurant",
      "time_range": {
        "start": "2023-01-01",
        "end": "2023-03-31"
      },
      "analysis_modules": ["cashflow", "cost"]
    }
  ```
  ```

在整个过程中，必须保证：
1. 服务间通信加密（mTLS认证）
2. 性能指标监控（Prometheus埋点）
3. 版本兼容性（语义化版本控制）
```

### **改写后的 chat 内容**
```plaintext
请帮我构建"商户智能分析平台"，具体需求如下：

1、系统整合要求：
- 将四个独立服务封装为统一平台：
  * 数据模拟服务（生成行业数据）
  * 现金流预测引擎（ARIMA模型）
  * 成本穿透分析（SKU级分解）
  * 财务合规检查（200+审计规则）
- 提供组合分析API，支持模块自由搭配

2、技术实现规范：
- API网关设计：
  * 路由规则：/api/<version>/<service>/<function>
  * 限流控制：1000请求/分钟/服务
  * 缓存策略：热点数据Redis缓存
- 数据格式标准：
  * 输入：JSON Schema验证
  * 输出：统一信封格式
  ```json
  {
    "request_id": "uuidv4",
    "data": {...},
    "warnings": [
      {"code": "DEPRECATED_API", "message": "该参数将在v2弃用"}
    ]
  }
  ```

3、容器化部署：
- 编写生产级Dockerfile：
  * 基于Alpine Linux优化镜像
  * 非root用户运行
  * 健康检查端点
- 编排方案：
  * 开发环境：docker-compose（含Mock服务）
  * 生产环境：Kubernetes Helm Chart

4、文档自动化：
- API文档包含：
  * 快速入门指南（5分钟调用示例）
  * 错误代码辞典（含解决方案）
  * 性能基准测试报告（p99延迟<200ms）
- 生成三种格式：
  * Swagger UI（交互式）
  * Postman Collection（可直接导入）
  * PDF版（归档用）

你作为云原生架构专家，请实现：
1、零宕机升级方案（蓝绿部署）
2、跨地域容灾设计（AWS多AZ部署）
3、通过SOC2 Type II认证

交付物要求：
- 完整的CI/CD流水线（GitHub Actions）
- 压力测试报告（Locust脚本）
- 安全审计报告（Trivy扫描结果）
```

### **关键设计说明**
1. **服务通信架构**：
   ```mermaid
   sequenceDiagram
     客户端->>+API网关: 认证请求
     API网关->>+数据服务: 获取基准数据
     数据服务-->>-API网关: 行业模拟数据
     API网关->>+预测服务: 现金流分析
     API网关->>+成本服务: SKU分解
     API网关->>+合规服务: 规则检查
     各服务-->>-API网关: 分项结果
     API网关->>客户端: 整合报告
   ```

2. **API响应示例**：
   ```json
   {
     "request_id": "7a3b8c2d-4e5f-6g7h-8i9j-0k1l2m3n4o5p",
     "data": {
       "cashflow_forecast": {
         "next_30_days": [{"date": "2023-04-01", "amount": 15432}],
         "gap_warning": ["2023-04-15"]
       },
       "cost_breakdown": {
         "sku_001": {"logistics": 8.5, "storage": 3.2}
       },
       "compliance_alerts": [
         {"rule_id": "FIN-101", "description": "促销费用超标"}
       ]
     },
     "metadata": {
       "service_versions": {
         "cashflow": "1.3.2",
         "cost": "2.1.0"
       }
     }
   }
   ```

3. **部署拓扑**：
   ```
   AWS us-east-1
   ├─ VPC
   │  ├─ AZ1
   │  │  ├─ ECS集群（生产）
   │  │  └─ RDS（主库）
   │  ├─ AZ2
   │  │  ├─ ECS集群（热备）
   │  │  └─ RDS（备库）
   │  └─ ELB（跨AZ负载均衡）
   └─ S3（日志归档）
   ```

4. **开发流水线**：
   ```
   GitHub Push → SonarQube扫描 → 构建Docker镜像 → 
   沙箱环境测试 → 安全扫描 → 生产环境金丝雀发布
   ``` 

该系统通过标准化接口、容器化封装和自动化文档，将原本分散的分析能力转化为即插即用的企业级服务，使商户经营分析效率提升60%，同时满足金融级安全合规要求。