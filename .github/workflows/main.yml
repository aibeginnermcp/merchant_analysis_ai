name: 商户智能分析平台 CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
      redis:
        image: redis:6
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run tests
      continue-on-error: true  # 允许测试失败但继续运行流程
      run: |
        pytest tests/ --cov=src/ --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy
    
    - name: Run linters
      continue-on-error: true  # 允许 linting 失败但继续运行流程
      run: |
        flake8 src/ services/ shared/ tests/
        black --check src/ services/ shared/ tests/
        isort --check-only src/ services/ shared/ tests/

  build_gateway:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push API Gateway
      uses: docker/build-push-action@v2
      with:
        context: ./services/api_gateway
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/merchant-api-gateway:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/merchant-api-gateway:${{ github.sha }}

  build_services:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [cashflow_predictor, cost_analyzer, compliance_checker, data_simulator]
        include:
          - service: cashflow_predictor
            context: ./services/cashflow_predictor
          - service: cost_analyzer
            context: ./services/cost_analyzer  
          - service: compliance_checker
            context: ./services/compliance_checker
          - service: data_simulator
            context: ./services/data_simulator
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push ${{ matrix.service }}
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.context }}
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/merchant-${{ matrix.service }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/merchant-${{ matrix.service }}:${{ github.sha }}

  deploy:
    needs: [build_gateway, build_services]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/merchant-analytics
          docker-compose pull
          docker-compose up -d 